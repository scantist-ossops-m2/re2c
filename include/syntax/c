supported_apis = ["default", "generic"];
supported_code_models = ["goto_label", "loop_switch", "recursive_functions"];
supported_targets = ["code", "dot", "skeleton"];
supported_features = ["nested_ifs", "bitmaps", "computed_gotos", "case_ranges"];

semicolons = 1;
implicit_bool_conversion = 1;
backtick_quoted_strings = 0;
standalone_single_quotes = 0;
indentation_sensitive = 0;

conf:api = default;
conf:api:style = functions;
conf:api:sigil = "@@";
conf:header = "";
conf:eof = -1;
conf:sentinel = -1;
conf:yyfill:enable = 1;
conf:yyfill:parameter = 1;
conf:yyfill:check = 1;
conf:tags = 0;
conf:leftmost-captures = 0;
conf:posix-captures = 0;
conf:tags:prefix = "yyt";
conf:tags:expression = "@@";
conf:invert-captures = 0;
conf:define:YYBACKUP = "YYBACKUP";
conf:define:YYBACKUPCTX = "YYBACKUPCTX";
conf:define:YYCONDTYPE = "YYCONDTYPE";
conf:define:YYCTYPE = "YYCTYPE";
conf:define:YYCTXMARKER = "YYCTXMARKER";
conf:define:YYCURSOR = "YYCURSOR";
conf:define:YYDEBUG = "YYDEBUG";
conf:define:YYFILL = "YYFILL";
conf:define:YYFILL@len = "@@";
conf:define:YYFILL:naked = 0;
conf:define:YYGETCONDITION = "YYGETCONDITION";
conf:define:YYGETCONDITION:naked = 0;
conf:define:YYGETSTATE = "YYGETSTATE";
conf:define:YYGETSTATE:naked = 0;
conf:define:YYLESSTHAN = "YYLESSTHAN";
conf:define:YYLIMIT = "YYLIMIT";
conf:define:YYMARKER = "YYMARKER";
conf:define:YYMAXFILL = "YYMAXFILL";
conf:define:YYMAXNMATCH = "YYMAXNMATCH";
conf:define:YYMTAGN = "YYMTAGN";
conf:define:YYMTAGP = "YYMTAGP";
conf:define:YYPEEK = "YYPEEK";
conf:define:YYRESTORE = "YYRESTORE";
conf:define:YYRESTORECTX = "YYRESTORECTX";
conf:define:YYRESTORETAG = "YYRESTORETAG";
conf:define:YYSETCONDITION = "YYSETCONDITION";
conf:define:YYSETCONDITION@cond = "@@";
conf:define:YYSETCONDITION:naked = 0;
conf:define:YYSETSTATE = "YYSETSTATE";
conf:define:YYSETSTATE:naked = 0;
conf:define:YYSETSTATE@state = "@@";
conf:define:YYSHIFT = "YYSHIFT";
conf:define:YYSHIFTSTAG = "YYSHIFTSTAG";
conf:define:YYSHIFTMTAG = "YYSHIFTMTAG";
conf:define:YYSKIP = "YYSKIP";
conf:define:YYSTAGN = "YYSTAGN";
conf:define:YYSTAGP = "YYSTAGP";
conf:define:YYFN = ["<undefined-function-name>;<undefined-function-type>"];
conf:yyfn:sep = ";";
conf:variable:yyctable = "yyctable";
conf:variable:yyaccept = "yyaccept";
conf:variable:yytarget = "yytarget";
conf:variable:yystate = "yystate";
conf:variable:yych = "yych";
conf:variable:yych:conversion = 0;
conf:variable:yych:literals = char_or_hex;
conf:variable:yych:emit = (code_model.recursive_functions ? 0 : 1);
conf:variable:yybm = "yybm";
conf:variable:yybm:hex = 0;
conf:variable:yystable = ""; // deprecated
conf:cond:abort = (code_model.recursive_functions ? 1 : 0); // `abort()` requires include
conf:cond:prefix = "yyc_";
conf:cond:enumprefix = "yyc";
conf:cond:divider = "/* *********************************** */";
conf:cond:divider@cond = "@@";
conf:cond:goto = "goto @@;";
conf:cond:goto@cond = "@@";
conf:state:abort = (code_model.recursive_functions ? 1 : 0); // `abort()` requires include
conf:state:nextlabel = 0;
conf:bit-vectors = 0;
conf:debug-output = 0;
conf:computed-gotos = 0;
conf:computed-gotos:threshold = 9;
conf:nested-ifs = 0;
conf:case-insensitive = 0;
conf:case-inverted = 0;
conf:case-ranges = 0;
conf:unsafe = 0;
conf:encoding:ebcdic = 0;
conf:encoding:utf32 = 0;
conf:encoding:ucs2 = 0;
conf:encoding:utf16 = 0;
conf:encoding:utf8 = 0;
conf:encoding-policy = ignore;
conf:empty-class = match-empty;
conf:indent:string = "\t";
conf:indent:top = 0;
conf:label:prefix = "yy";
conf:label:yyfill = "yyFillLabel";
conf:label:yyloop = "";
conf:label:yyNext = "yyNext";
conf:label:start = 0;

code:var_local = topindent type " " name (have_init? " = " init) ";" nl;
code:var_global = code:var_local;

code:const_local = topindent type " " name " = " init ";" nl;
code:const_global = topindent "#define " name " " init nl;

code:array_local =
    topindent type " " name "[" size "] = {" nl indent
        [row{0:-2}: topindent [elem{0:-2}: elem ", "] [elem{-1}: elem ","] nl]
        [row{-1}:   topindent [elem{0:-2}: elem ", "] [elem{-1}: elem]     nl]
    dedent topindent "};" nl;
code:array_global = code:array_local;
code:array_elem = array "[" index "]";

code:type_int = "int";
code:type_uint = "unsigned int";
// code:type_cond_enum
code:type_yybm = "static const unsigned char";
code:type_yytarget = "static const void*";

code:assign = topindent [lhs: lhs " = "] rhs ";" nl;
code:assign_op = topindent lhs " " op "= " rhs ";" nl;

code:if_then_else =
    [branch{0}: topindent "if (" cond ") {" nl
        indent [stmt: stmt] dedent]
    [branch{1:-1}: topindent "} else " (have_cond? "if (" cond ") ") "{" nl
        indent [stmt: stmt] dedent]
    topindent "}" nl;

code:if_then_else_oneline =
    [branch{0}:    topindent "if (" cond ") " [stmt: stmt] nl]
    [branch{1:-1}: topindent "else " (have_cond? "if (" cond ") ") [stmt: stmt] nl];

code:switch =
    topindent "switch (" expr ") {" nl
        indent [case: case] dedent
    topindent "}" nl;

code:switch_cases =
    [case: case nl]
        indent [stmt: stmt] dedent;

code:switch_cases_oneline =
    [case{0:-2}: case nl]
    [case{-1}:   case " " [stmt: stmt] nl];

code:switch_case_range = (case_ranges
    ? topindent "case " [val{0}: val] (multival ? " ... " [val{-1}: val]) ":"
    : [val{0:-2}: topindent "case " val ":" nl]
      [val{-1}:   topindent "case " val ":"]);

code:switch_case_default =
    topindent "default:";

code:loop =
    topindent "for (;;) {" nl
        indent [stmt: stmt] dedent
    topindent "}" nl;

code:goto = topindent "goto " label ";" nl;

code:enum =
    "enum " name " {" nl indent
        [elem{0:-2}: topindent elem (have_init? " = " init) "," nl]
        [elem{-1}:   topindent elem (have_init? " = " init) nl]
    dedent "};" nl;

code:enum_elem = name;

code:fndecl =
    topindent type " " name "("
        [arg{0:-2}: argtype " " argname ", "]
        [arg{-1}:   argtype " " argname]
    ");" nl;

code:fndef =
    topindent type " " name "("
        [arg{0:-2}: argtype " " argname ", "]
        [arg{-1}:   argtype " " argname]
    ") {" nl
        indent [stmt: stmt] dedent
    "}" nl;

code:fncall =
    topindent (have_retval ? retval " = ") name "(" [arg{0:-2}: arg ", "] [arg{-1}: arg] ");" nl;

code:tailcall =
    topindent (have_retval ? "return ") name "(" [arg{0:-2}: arg ", "] [arg{-1}: arg] ");" nl;

code:recursive_functions =
    [fn: fndecl] nl
    [fn: fndef nl];

code:fingerprint =
    "/* Generated by re2c" (version? " " version) (date? " on " date) " */" nl;

code:line_info = "#line " line " \"" file "\"" nl;

code:abort = topindent "abort();" nl;

code:yyaccept = topindent var " = " num ";" nl;

code:yydebug = topindent debug "(" state ", " char ");" nl;

code:yypeek =
    topindent (code_model.recursive_functions ? ctype " ") char " = " (api.generic
        ? peek (api_style.functions ? "()")
        : typecast "*" cursor
    ) ";" nl;

code:yyskip =
    topindent (api.generic
        ? skip (api_style.functions ? "();")
        : "++" cursor ";"
    ) nl;

code:yybackup =
    topindent (api.generic
        ? backup (api_style.functions ? "();")
        : marker " = " cursor ";"
    ) nl;

code:yyskip_peek =
    topindent (code_model.recursive_functions ? ctype " ") char " = "
        typecast "*++" cursor ";" nl;

code:yypeek_skip =
    topindent (code_model.recursive_functions ? ctype " ") char " = "
        typecast "*" cursor "++;" nl;

code:yyskip_backup = topindent marker " = ++" cursor ";" nl;

code:yybackup_skip = topindent marker " = " cursor "++;" nl;

code:yybackup_peek =
    topindent (code_model.recursive_functions ? ctype " ") char " = "
        typecast "*(" marker " = " cursor ");" nl;

code:yyskip_backup_peek =
    topindent (code_model.recursive_functions ? ctype " ") char " = "
        typecast "*(" marker " = ++" cursor ");" nl;

code:yybackup_peek_skip =
    topindent (code_model.recursive_functions ? ctype " ") char " = "
        typecast "*(" marker " = " cursor "++);" nl;
